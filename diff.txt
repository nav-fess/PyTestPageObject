diff --git a/pages/base_page.py b/pages/base_page.py
index 6c514a1..b228689 100644
--- a/pages/base_page.py
+++ b/pages/base_page.py
@@ -3,16 +3,36 @@ from selenium.common.exceptions import TimeoutException
 from selenium.webdriver.common.by import By
 from selenium.webdriver.support import expected_conditions as EC
 from selenium.webdriver.support.ui import WebDriverWait
+from .locators import BasePageLocators
+from .locators import ProductPageLocators
+from .locators import MainPageLocators
 import time
 import math
 
 class BasePage():
-    def __init__(self, browser, url, timeout=10):
+    def __init__(self, browser, url, timeout=7):
         self.browser = browser
         self.url = url
         self.browser.implicitly_wait(timeout)
 
 
+    def click_to_button_busket(self):
+        button = self.wait_element(*ProductPageLocators.FORM_BASKET).click()
+	
+   		    
+    def click_to_view_busket(self):
+        button = self.wait_element(*MainPageLocators.VIEW_BASKET).click()
+	
+
+    def go_to_login_page(self):
+        rezult = self.browser.find_element(*BasePageLocators.LOGIN_LINK).click()
+        assert rezult == None , "not click on link"
+        
+
+    def should_be_login_link(self):
+        assert self.is_element_present(*BasePageLocators.LOGIN_LINK), "Login link is not presented"  
+
+
     def open(self):
         self.browser.get(self.url)
         time.sleep(3)
diff --git a/pages/locators.py b/pages/locators.py
index 6850c60..b9e9ba2 100644
--- a/pages/locators.py
+++ b/pages/locators.py
@@ -1,8 +1,14 @@
 from selenium.webdriver.common.by import By
 
+class BasePageLocators():
+    LOGIN_LINK = (By.CSS_SELECTOR, "#login_link")
+    LOGIN_LINK_INVALID = (By.CSS_SELECTOR, "#login_link_inc")    
+
 
 class MainPageLocators():
-    LOGIN_LINK = (By.CSS_SELECTOR, "#login_link")
+    BASKET_ITEMS = (By.CSS_SELECTOR, ".basket-items")	
+    VOID_BASKET = (By.CSS_SELECTOR, "#content_inner")  
+    VIEW_BASKET = (By.CSS_SELECTOR, ".btn-group > a") 	 
 
 
 class LoginPageLocators():
diff --git a/pages/login_page.py b/pages/login_page.py
index 7c885d2..1665685 100644
--- a/pages/login_page.py
+++ b/pages/login_page.py
@@ -1,5 +1,5 @@
 from .base_page import BasePage
-
+from .locators import LoginPageLocators
 
 class LoginPage(BasePage):
     def should_be_login_page(self):
@@ -8,7 +8,7 @@ class LoginPage(BasePage):
         self.should_be_register_form()
 
     def should_be_login_url(self):
-        assert 'login' in self.browser.current_url. "link doesn`t contain 'login'"
+        assert 'login' in self.browser.current_url, "link doesn`t contain 'login'"
 
 
     def should_be_login_form(self):
diff --git a/pages/main_page.py b/pages/main_page.py
index 38c3aba..77c9aa6 100644
--- a/pages/main_page.py
+++ b/pages/main_page.py
@@ -4,13 +4,6 @@ from .locators import MainPageLocators
 from .login_page import LoginPage
 
 class MainPage(BasePage):
-
-    def go_to_login_page(self):
-        login_link = self.= self.wait_element(*MainPageLocators.LOGIN_LINK)
-        login_link.click()
-
-    
-    def should_be_login_link(self):
-        assert self.is_element_present(*MainPageLocators.LOGIN_LINK), "Login link is not presented"
-
+    def __init__(self, *args, **kwargs):
+        super(MainPage, self).__init__(*args, **kwargs)
  
diff --git a/pages/product_page.py b/pages/product_page.py
index d0e05a7..70d4c3d 100644
--- a/pages/product_page.py
+++ b/pages/product_page.py
@@ -4,11 +4,6 @@ from .locators import ProductPageLocators
 import time
 
 class ProductPage(BasePage):
-    def click_to_button_busket(self):
-        button = self.wait_element(*ProductPageLocators.FORM_BASKET) 
-        button.click()
-
-
     def text_product_name_and_prise(self, number_attribute):
         text_name_and_prise = self.wait_element(*ProductPageLocators.PRODUCT_NAME).text
         attribute_value = self.browser.find_elements(*ProductPageLocators.PRODUCT_NAME_START)[number_attribute].text
@@ -29,11 +24,10 @@ class ProductPage(BasePage):
 
 
     def should_not_be_success_message(self):
-        rezult =  self.is_not_element_present(*ProductPageLocators.SUCCESS_MESSAGE)
-        print(f"rezult = {rezult}")
-        assert rezult,"Success message is presented"
+        assert self.is_not_element_present(*ProductPageLocators.SUCCESS_MESSAGE),"Success message is presented"
 
 
     def should_is_disappeared_message(self):
-        assert self.is_disappeared(*ProductPageLocators.SUCCESS_MESSAGE),"Success message is presented"      
+        assert self.is_disappeared(*ProductPageLocators.SUCCESS_MESSAGE),"Success message is presented"
+      
 
diff --git a/test_main_page.py b/test_main_page.py
index 7ead961..a5355b5 100644
--- a/test_main_page.py
+++ b/test_main_page.py
@@ -1,8 +1,9 @@
 import pytest
 from selenium import webdriver
 from selenium.webdriver.common.by import By
-from pages.product_page import ProductPage
-from pages.main_page MainPage
+from pages.main_page import MainPage
+from pages.login_page import LoginPage
+from pages.basket_page import  BasketPage
 import time
 
 
@@ -10,9 +11,7 @@ def test_guest_should_see_login_link(browser):
     link = "http://selenium1py.pythonanywhere.com/"
     page = MainPage(browser, link)
     page.open()
-    time.sleep(2)
     page.should_be_login_link()
-    time.sleep(1)
 
 
 def test_guest_can_go_to_login_page(browser):
@@ -23,5 +22,13 @@ def test_guest_can_go_to_login_page(browser):
     login_page = LoginPage(browser, browser.current_url)
     login_page.should_be_login_page()
 
-    
+
+def test_guest_cant_see_product_in_basket_opened_from_main_page(browser):
+    link = "http://selenium1py.pythonanywhere.com/"
+    page = MainPage(browser, link)
+    page.open()	
+    page.click_to_view_busket()
+    basket_page = BasketPage(browser, browser.current_url)	
+    basket_page.not_items_in_basket()
+    basket_page.text_void_basket()	
 
diff --git a/test_product_page.py b/test_product_page.py
index 7bb6da7..972a473 100644
--- a/test_product_page.py
+++ b/test_product_page.py
@@ -1,6 +1,7 @@
 import pytest
 from selenium import webdriver
 from pages.product_page import ProductPage
+from pages.basket_page import  BasketPage
 
 
 @pytest.mark.parametrize('part_address', list(range(10)))
@@ -12,10 +13,11 @@ def test_guest_can_add_product_to_basket(browser, part_address):
     page.solve_quiz_and_get_code()
     page.compare_product_name()
     page.compare_product_prise()
-    
+
+
 def test_guest_cant_see_success_message_after_adding_product_to_basket(browser):
-    link = f"http://selenium1py.pythonanywhere.com/catalogue/coders-at-work_207/?promo=offer" 
-    page = ProductPage(browser, link)    
+    link = f"http://selenium1py.pythonanywhere.com/catalogue/coders-at-work_207/?promo=offer0" 
+    page = ProductPage(browser) 
     page.open()
     page.click_to_button_busket()
     page.solve_quiz_and_get_code()
@@ -30,7 +32,7 @@ def test_guest_cant_see_success_message(browser):
 
 
 def test_message_disappeared_after_adding_product_to_basket(browser):
-    link = f"http://selenium1py.pythonanywhere.com/catalogue/coders-at-work_207/?promo=offer0"
+    link = "http://selenium1py.pythonanywhere.com/catalogue/coders-at-work_207/?promo=offer0"
     page = ProductPage(browser, link)    
     page.open()
     page.click_to_button_busket()
@@ -38,3 +40,30 @@ def test_message_disappeared_after_adding_product_to_basket(browser):
     page.should_is_disappeared_message()
 
 
+def test_guest_should_see_login_link_on_product_page(browser):
+    link = "http://selenium1py.pythonanywhere.com/en-gb/catalogue/the-city-and-the-stars_95/"
+    page = ProductPage(browser, link)
+    page.open()
+    page.should_be_login_link()
+
+
+def test_guest_can_go_to_login_page_from_product_page(browser): 
+    link = "http://selenium1py.pythonanywhere.com/en-gb/catalogue/the-city-and-the-stars_95/"
+    page = ProductPage(browser, link)
+    page.open()
+    page.go_to_login_page()
+
+def test_guest_cant_see_product_in_basket_opened_from_main_page(browser):
+    link = "http://selenium1py.pythonanywhere.com/"
+    page = ProductPage(browser, link)
+    page.open()	
+    page.click_to_view_busket()
+    basket_page = BasketPage(browser, browser.current_url)	
+    basket_page.not_items_in_basket()
+    basket_page.text_void_basket()	
+
+
+
+
+
+
